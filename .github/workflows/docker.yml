### Git Self Hosted ###
name: Deploy to VPS with Docker Compose and Git Actions

on:
  repository_dispatch:
    types: [start-deploy]

jobs:
  deploy:
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Sync files from S3 to local VPS directory
        # Ensure that the latest assets from S3 are downloaded to the wp-content/uploads directory
        # This directory is linked to the Docker volume `my_volume` defined in docker-compose.yml
        run: |
          mkdir -p /var/www/html/wp-content/uploads
          aws s3 sync s3://docker-actions/assets /var/www/html/wp-content/uploads --delete
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ap-southeast-2

      - name: Check if Docker Compose is running
        id: check_compose
        run: |
          if sudo docker-compose ps | grep -q 'Up'; then
            echo "Docker Compose is already running."
            echo "::set-output name=running::true"
          else
            echo "Docker Compose is not running."
            echo "::set-output name=running::false"
          fi

      - name: Start Docker Compose
        # Run Docker Compose in detached mode only if it is not running
        if: steps.check_compose.outputs.running == 'false'
        run: |
          sudo docker-compose up -d

      - name: Backup Docker Volume to S3
        # Archive the Docker volume data (matching volume name: `my_volume`)
        # This volume contains the WordPress wp-content/uploads, where media files are stored
        run: |
          docker run --rm -v my_volume:/volume -v /tmp:/backup alpine \
            sh -c "cd /volume && tar -czf /backup/my_volume_backup.tar.gz ."
          
          # Upload backup to S3
          aws s3 cp /tmp/my_volume_backup.tar.gz s3://docker-actions/backups/my_volume_backup_$(date +%F).tar.gz
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ap-southeast-2

      - name: Setup Daily Backup Cron Job
        # Set up a cron job to run the backup script every day at 2 AM / Morning
        run: |
          echo "0 2 * * * /usr/local/bin/backup_to_s3.sh" | sudo tee -a /etc/crontab
          sudo service cron restart
